import { useState } from 'react';

// Data for algorithms
const algorithms = {
  "C#": [
    {
      id: "reverse-string",
      title: "Reverse a String",
      description: "An algorithm that reverses the characters in a string. This is a common interview question that tests basic string manipulation.",
      code: `public static string ReverseString(string input)
{
    char[] charArray = input.ToCharArray();
    Array.Reverse(charArray);
    return new string(charArray);
}

// Alternative manual implementation
public static string ReverseStringManual(string input)
{
    char[] charArray = new char[input.Length];
    for (int i = 0; i < input.Length; i++)
    {
        charArray[i] = input[input.Length - 1 - i];
    }
    return new string(charArray);
}`
    },
    {
      id: "anagrams",
      title: "Anagrams",
      description: "Determines if two strings are anagrams of each other (contain the same characters in different orders).",
      code: `public static bool AreAnagrams(string first, string second)
{
    // Remove spaces and convert to lowercase
    first = first.Replace(" ", "").ToLower();
    second = second.Replace(" ", "").ToLower();
    
    // Check if lengths are equal
    if (first.Length != second.Length)
        return false;
    
    // Sort characters and compare
    char[] charArray1 = first.ToCharArray();
    char[] charArray2 = second.ToCharArray();
    
    Array.Sort(charArray1);
    Array.Sort(charArray2);
    
    return new string(charArray1) == new string(charArray2);
}`
    },
    {
      id: "fizzbuzz",
      title: "FizzBuzz",
      description: "A classic programming problem: print numbers from 1 to n, but print 'Fizz' for multiples of 3, 'Buzz' for multiples of 5, and 'FizzBuzz' for multiples of both.",
      code: `public static void FizzBuzz(int n)
{
    for (int i = 1; i <= n; i++)
    {
        bool divisibleBy3 = i % 3 == 0;
        bool divisibleBy5 = i % 5 == 0;
        
        if (divisibleBy3 && divisibleBy5)
            Console.WriteLine("FizzBuzz");
        else if (divisibleBy3)
            Console.WriteLine("Fizz");
        else if (divisibleBy5)
            Console.WriteLine("Buzz");
        else
            Console.WriteLine(i);
    }
}`
    },
    {
      id: "palindrome",
      title: "Palindrome Checker",
      description: "Check if a string is a palindrome (reads the same forward and backward).",
      code: `public static bool IsPalindrome(string input)
{
    // Remove non-alphanumeric characters and convert to lowercase
    string cleanedInput = new string(
        input.ToLower()
             .Where(char.IsLetterOrDigit)
             .ToArray()
    );
    
    int left = 0;
    int right = cleanedInput.Length - 1;
    
    while (left < right)
    {
        if (cleanedInput[left] != cleanedInput[right])
            return false;
            
        left++;
        right--;
    }
    
    return true;
}`
    }
  ],
  "JavaScript": [
    {
      id: "max-characters",
      title: "Max Characters",
      description: "Find the character that appears the most in a string.",
      code: `function maxCharacter(str) {
  const charMap = {};
  let max = 0;
  let maxChar = '';

  // Create character map
  for (let char of str) {
    charMap[char] = charMap[char] + 1 || 1;
  }

  // Find max character
  for (let char in charMap) {
    if (charMap[char] > max) {
      max = charMap[char];
      maxChar = char;
    }
  }

  return maxChar;
}`
    },
    {
      id: "reverseint",
      title: "Reverse Integer",
      description: "Reverse the digits of an integer, maintaining the sign.",
      code: `function reverseInt(n) {
  const reversed = n
    .toString()
    .split('')
    .reverse()
    .join('');
    
  return parseInt(reversed) * Math.sign(n);
}`
    },
    {
      id: "biggest-number",
      title: "Find Biggest Number",
      description: "Find the largest number in an array of integers.",
      code: `// Using Math.max
function findBiggestNumber(arr) {
  return Math.max(...arr);
}

// Using a loop (manual approach)
function findBiggestNumberManual(arr) {
  let max = arr[0];
  
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  
  return max;
}`
    },
    {
      id: "binary-gap",
      title: "Binary Gap",
      description: "Find the longest sequence of consecutive zeros in the binary representation of an integer.",
      code: `function binaryGap(N) {
  // Convert to binary and remove leading/trailing zeros
  const binary = N.toString(2);
  
  let maxGap = 0;
  let currentGap = 0;
  let counting = false;
  
  for (let i = 0; i < binary.length; i++) {
    if (binary[i] === '1') {
      if (counting) {
        maxGap = Math.max(maxGap, currentGap);
      }
      counting = true;
      currentGap = 0;
    } else if (counting) {
      currentGap++;
    }
  }
  
  return maxGap;
}`
    }
  ]
};

// Main App component
export default function App() {
  const [activeTab, setActiveTab] = useState("C#");
  const [selectedAlgo, setSelectedAlgo] = useState(null);
  const [currentView, setCurrentView] = useState("list"); // "list" or "details"

  const handleSelectAlgorithm = (algo) => {
    setSelectedAlgo(algo);
    setCurrentView("details");
  };

  const handleBackToList = () => {
    setCurrentView("list");
    setSelectedAlgo(null);
  };

  return (
    <div className="flex flex-col min-h-screen bg-white">
      {/* Navbar */}
      <nav className="bg-blue-800 text-white p-4">
        <div className="container mx-auto flex justify-between items-center">
          <div className="text-xl font-bold">Algo</div>
          <div className="space-x-4">
            <button 
              className={`px-3 py-1 rounded ${activeTab === "C#" ? "bg-blue-600" : ""}`}
              onClick={() => { setActiveTab("C#"); setCurrentView("list"); setSelectedAlgo(null); }}
            >
              C#
            </button>
            <button 
              className={`px-3 py-1 rounded ${activeTab === "JavaScript" ? "bg-blue-600" : ""}`}
              onClick={() => { setActiveTab("JavaScript"); setCurrentView("list"); setSelectedAlgo(null); }}
            >
              JavaScript
            </button>
            <button className="px-3 py-1">Details</button>
            <button className="px-3 py-1">GitHub</button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="container mx-auto flex-grow p-4">
        {currentView === "list" ? (
          <div>
            <h1 className="text-3xl font-bold mb-6 text-blue-800">{activeTab} Algorithms</h1>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {algorithms[activeTab].map((algo, index) => (
                <div 
                  key={algo.id}
                  className={`border border-blue-300 rounded-lg p-5 hover:shadow-lg cursor-pointer transition-all duration-300 ${index % 2 === 0 ? 'bg-blue-50' : 'bg-blue-100'} hover:bg-blue-200`}
                  onClick={() => handleSelectAlgorithm(algo)}
                >
                  <div className="flex items-center mb-3">
                    <div className="w-10 h-10 flex items-center justify-center rounded-full bg-blue-700 text-white font-bold mr-3">
                      {index + 1}
                    </div>
                    <h2 className="text-xl font-semibold text-blue-800">{algo.title}</h2>
                  </div>
                  <p className="text-blue-900 mt-2 text-sm">{algo.description.substring(0, 100)}...</p>
                  <div className="mt-3 text-right">
                    <span className="text-blue-700 font-medium text-sm">View details →</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div>
            <div className="mb-4">
              <button 
                onClick={handleBackToList}
                className="bg-blue-700 text-white px-4 py-2 rounded hover:bg-blue-800 transition-colors"
              >
                Back to List
              </button>
            </div>
            
            <h1 className="text-3xl font-bold mb-6 text-blue-800">{selectedAlgo?.title}</h1>
            
            <div className="grid md:grid-cols-2 gap-6">
              {/* Description */}
              <div className="bg-blue-50 p-6 rounded-lg">
                <h2 className="text-xl font-semibold mb-4 text-blue-700">Description</h2>
                <p className="text-gray-800">{selectedAlgo?.description}</p>
              </div>
              
              {/* Code */}
              <div className="bg-gray-900 p-6 rounded-lg">
                <h2 className="text-xl font-semibold mb-4 text-white">Implementation</h2>
                <pre className="text-green-400 font-mono text-sm whitespace-pre-wrap overflow-auto max-h-96">
                  {selectedAlgo?.code}
                </pre>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-blue-800 text-white p-6 mt-8">
        <div className="container mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <h3 className="text-xl font-bold">Algo</h3>
              <p className="text-blue-200">A showcase of programming algorithms</p>
            </div>
            <div className="text-blue-200">
              © {new Date().getFullYear()} Algo. All rights reserved.
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
